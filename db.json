{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"733167096cf0e38e20e834d775cd4bc8e8ad0c23","modified":1468907579229},{"_id":"source/favicon.ico","hash":"f5bed2d07ce68a5aecf7eaf8e4e5bbf9dc5fcfc5","modified":1468907579229},{"_id":"themes/maupassant/.travis.yml","hash":"0339959f29deddc365e8fe8bd85da524410b9a23","modified":1468912008790},{"_id":"themes/maupassant/LICENSE","hash":"019dc6a9aba02ae3aaabca45f39aecd6e8e7f1d8","modified":1468912008790},{"_id":"themes/maupassant/README.md","hash":"75d8c42569809961953d1934de445418c00ab94c","modified":1468912008790},{"_id":"themes/maupassant/_config.yml","hash":"49651772f41f7f266042eedb2a37c833b576c15f","modified":1468912244086},{"_id":"themes/maupassant/package.json","hash":"81fb4e2ac051ecfb9a93f37b28910291b939771a","modified":1468912008791},{"_id":"source/_posts/20140709-3154ErrorOfSqlServer.md","hash":"0eea4041d6058d03fa2e0bb6bd4bc244c0bb7d93","modified":1468907579229},{"_id":"source/_posts/20140711-RanetoANodejsWiki.md","hash":"c13d34a4828a1d65ac74da460d92349fb983cf5f","modified":1468907579229},{"_id":"source/_posts/Hexo-started.md","hash":"5b19ad619936b0b2f6ddfa34e93012c31c936f11","modified":1468907579229},{"_id":"source/_posts/HexoAutoDeploy.md","hash":"bb60323bb29b887f379c7529015c81685e9e9afb","modified":1468907579229},{"_id":"source/about/index.md","hash":"ef97b7acfbf1aaa0fd95c62a3df16d788ba8e62d","modified":1468907579229},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1468912008784},{"_id":"themes/maupassant/.git/config","hash":"776ed8041073d1bb2a234fa37a0d49bad1f0c5f4","modified":1468912008787},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1468912007839},{"_id":"themes/maupassant/.git/index","hash":"486cf62106f102dfe9b9d46dff3917fbd580efb4","modified":1468912008792},{"_id":"themes/maupassant/.git/packed-refs","hash":"a6f3ad49cf31ddcc1355079a068a9caf750ee71d","modified":1468912008784},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"5d3556a885e355a8c2da65ef3e7b3ee36a628bfa","modified":1468912008790},{"_id":"themes/maupassant/languages/en.yml","hash":"e13ab1a2d2f1edbe67b4c035fd4667cb6a31db8e","modified":1468912008790},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"58e1d04bcd1834fa9d2960e18e027abbbccbedc9","modified":1468912008790},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"b47906ec0abf867fb3e3360bc046b7afb68aee25","modified":1468912008790},{"_id":"themes/maupassant/languages/ko.yml","hash":"909a33e0befa6978e8e72157c6b415b48551ee31","modified":1468912008790},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"ebacfa5d0c14d603e0d505757adb24c0bbe5dd13","modified":1468912008790},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"56b65995c60e99dcebbf00168447fd225d28e5b2","modified":1468912008790},{"_id":"themes/maupassant/layout/archive.jade","hash":"0050c883b4f202add71c8664d65e6072179e7190","modified":1468912008791},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"1ad721de96784bf4253316b796db6200148d4152","modified":1468912008791},{"_id":"themes/maupassant/layout/base.jade","hash":"126a256d03069fef07fb2441ecb17269f2853acb","modified":1468912008791},{"_id":"themes/maupassant/layout/index.jade","hash":"7466ce52023ed8a413a6b4461354a9e20e62fc14","modified":1468912008791},{"_id":"themes/maupassant/layout/page.jade","hash":"8d70fd3b93f2c9087a9ea7ec538dcc1d413bea01","modified":1468912008791},{"_id":"themes/maupassant/layout/post.jade","hash":"9cf29fb0daed95935154ce0fa2b154df5a9b11b1","modified":1468912008791},{"_id":"themes/maupassant/layout/single-column.jade","hash":"c35fff4d9b331a41af5bc10f4278ec3d9da503db","modified":1468912008791},{"_id":"themes/maupassant/layout/timeline.jade","hash":"f03d8df63a188543cfe4e85e76194abe081411a1","modified":1468912008791},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1468912007839},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1468912007839},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1468912007839},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"3f482cd755064b196145630e7918f8779c6987ab","modified":1468912008787},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"3dbcc9a9f0d6e55da191d3393c18bbfcfe99fa69","modified":1468912008790},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"6c7f63ba04a4d28323ba31e79a4927f3d3fcc56e","modified":1468912008790},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"aa020b794e697e8e9612530c97c6295efde469fe","modified":1468912008790},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"acdf9e2d52ee86c831fa15ce1570930c5779bc78","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"b54b56faff9e47ab3ca3cdd55056c73e60776f3c","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"d6ac5dc4e9c7a1b866f1f92d88988cfb35aded4c","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"53f9cb77448e84a98da5eb688e2e12b173c555bb","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"a2d698c84bb6da08195fe870dbd7215f65388d3f","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"0f0e6770e9d5dd8040e330d71bbbfadd2df36a28","modified":1468912008791},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"8225bbc3cdb9648bc2e6872e5c616a9a1e4def4f","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7c6aed762934ca51aa2669b886254da24b77bc14","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"f57a0c76d243882b2b77330132bdb43bc648948b","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"e119c5afa85abc60d139e2da99b0bfcd7a6530f8","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"19431336d724d2118e46da43683bce9063176541","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"193546282908e499813534f86d27ef6e0a1357b3","modified":1468912008791},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"132f049ce677d0e38f50073174c4ee4b825d4a06","modified":1468912008791},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1468912008791},{"_id":"themes/maupassant/source/css/style.scss","hash":"1a1d7593de884f52e19444163ee99483ae20cb9e","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468912008791},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468912008792},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1468912008792},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1468912008792},{"_id":"themes/maupassant/source/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1468912008792},{"_id":"themes/maupassant/source/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1468912008792},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1468912008792},{"_id":"themes/maupassant/source/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1468912008792},{"_id":"themes/maupassant/.git/objects/pack/pack-3362406b2650ebe95b8849540f701e7c6df7b283.idx","hash":"7281cc8c6ee4efcb3bd22099b0f4a36e2cc6ed13","modified":1468912008782},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"e64e22346c144662fca2b7812482d939e096d4fd","modified":1468912008787},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"3f482cd755064b196145630e7918f8779c6987ab","modified":1468912008787},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1468912008784},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"3f482cd755064b196145630e7918f8779c6987ab","modified":1468912008784},{"_id":"themes/maupassant/.git/objects/pack/pack-3362406b2650ebe95b8849540f701e7c6df7b283.pack","hash":"493eb65391f8051a623d21923a3b3b89dcad974b","modified":1468912008782},{"_id":"public/about/index.html","hash":"922a2cf9615741a68c9d597151ba1e432b40344a","modified":1468913016671},{"_id":"public/archives/index.html","hash":"82ce49430ae405a03ba5a615ec526bb403818777","modified":1468913016676},{"_id":"public/archives/2014/index.html","hash":"82ce49430ae405a03ba5a615ec526bb403818777","modified":1468913016676},{"_id":"public/archives/2014/07/index.html","hash":"27eb07d40ccbc3601e1d932220767c7e0cbf7987","modified":1468913016676},{"_id":"public/archives/2014/12/index.html","hash":"e656ea248fdedd11b5078adc0375e4fe9b585599","modified":1468913016676},{"_id":"public/categories/Problems/index.html","hash":"06ca872130f94b9857673e58e30dbd4993da4829","modified":1468913016676},{"_id":"public/categories/OpenProjects/index.html","hash":"323c3d237847cce408afb6b17b5614b7082a6740","modified":1468913016676},{"_id":"public/index.html","hash":"a2161b4a4418f8d8105ed93940f97ae8f56da98b","modified":1468913016676},{"_id":"public/tags/sql-server-2005/index.html","hash":"a2298eb98c7602d8543f08b10aac4c6fd4992b26","modified":1468913016676},{"_id":"public/tags/备份还原/index.html","hash":"85d144bbf8d732c1d194cce7ff3f19352f3b689a","modified":1468913016676},{"_id":"public/tags/raneto/index.html","hash":"8bb44c09beab982e99d52a69d6336f18d1db97b8","modified":1468913016676},{"_id":"public/tags/wiki/index.html","hash":"fd4b82ac39b9afc42e8c9e90b9709d96f33b973f","modified":1468913016676},{"_id":"public/tags/markdown/index.html","hash":"9999156167c81344e974686bfbcff1962db72050","modified":1468913016676},{"_id":"public/tags/nodejs/index.html","hash":"8585fa80f4224d3d822b4dba8513e1eb13e01b5c","modified":1468913016677},{"_id":"public/tags/hexo/index.html","hash":"cc988b9381891c414b8ee0fbceb42fcf86ad5995","modified":1468913016677},{"_id":"public/tags/github/index.html","hash":"7771e760ba904748e400197db3b0d4207c58d4ae","modified":1468913016677},{"_id":"public/tags/vps/index.html","hash":"4fdf4fb11377ebae11f09958c193cd789836d08c","modified":1468913016677},{"_id":"public/tags/git/index.html","hash":"ccc030c0e782400d296825654b7fb09b71d32405","modified":1468913016677},{"_id":"public/2014/07/ciqt4vt9y0002qgls4j5br5v9/index.html","hash":"d781b277eaf12c371f90b7b13ed8252cf1375477","modified":1468913016679},{"_id":"public/2014/07/ciqt4vt9t0000qglsjlyuf5c7/index.html","hash":"88a981e481d21be0d7ee3e9296495614ed9dcca9","modified":1468913016679},{"_id":"public/2014/07/ciqt4vta60005qglsf3d6b4ex/index.html","hash":"45c526bcff22cfd9b4d1c4644ade4e9a8ff2ce2a","modified":1468913016679},{"_id":"public/2014/12/ciqt4vta60006qglsnvtbuoc4/index.html","hash":"c20663476c88e5a9df72b6ef99bd6d48c263497a","modified":1468913016679},{"_id":"public/CNAME","hash":"733167096cf0e38e20e834d775cd4bc8e8ad0c23","modified":1468913016682},{"_id":"public/favicon.ico","hash":"f5bed2d07ce68a5aecf7eaf8e4e5bbf9dc5fcfc5","modified":1468913016682},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1468913016682},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1468913016682},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1468913016682},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1468913016682},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1468913016682},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1468913016682},{"_id":"public/css/jquery.fancybox.css","hash":"f42f761157f26244673eb2f4a9215c70956f80dc","modified":1468913016701},{"_id":"public/js/codeblock-resizer.js","hash":"5d0b786d60bf225d9eabcc9cece2719ff4d9b6cd","modified":1468913016701},{"_id":"public/js/fancybox.js","hash":"13c4781570339f4fba76a3d7f202e442817dd605","modified":1468913016702},{"_id":"public/js/search.js","hash":"53db2eb255dd40a412ed62ea7332ca5a22f7816f","modified":1468913016702},{"_id":"public/js/share.js","hash":"f49776e0baa2b913ddc7a20db24b3edd469c8343","modified":1468913016702},{"_id":"public/js/smartresize.js","hash":"3ef157fd877167e3290f42c67a624ea375a46c24","modified":1468913016702},{"_id":"public/js/totop.js","hash":"7dbf8fcf582a4fb6eb9b2c60d6de9f9c2091ec4c","modified":1468913016702},{"_id":"public/css/style.css","hash":"df1b67eb431065a196d4681ca6bbaa4d75bea64f","modified":1468913016702}],"Category":[{"name":"Problems","_id":"ciqt4vta50004qglsz4alt4w7"},{"name":"OpenProjects","_id":"ciqt4vta80008qgls1sggmfz5"}],"Data":[],"Page":[{"title":"About","date":"2014-07-08T12:50:39.000Z","_content":"\n\n##Still Building...","source":"about/index.md","raw":"title: About\ndate: 2014-07-08 20:50:39\n---\n\n\n##Still Building...","updated":"2016-07-19T05:52:59.229Z","path":"about/index.html","comments":1,"layout":"page","_id":"ciqt4vt9x0001qglsqx3g694v","content":"<p>##Still Building…</p>\n","excerpt":"","more":"<p>##Still Building…</p>\n"}],"Post":[{"title":"SQL SERVER 2005恢复数据错误（3154）","date":"2014-07-09T12:18:31.000Z","_content":"\n###问题\n\n在**SqlServer2005**的**Management studio**里使用`bak`文件还原数据库的时候总是会发生下面的错误。\n\n![SQL Server restore error](http://images.cnblogs.com/cnblogs_com/adandelion/BACKERROR.GIF)\n\n>Restore failed for Server 'ADANDELI'. (Microsoft.SqlServer.Smo)\nAn exception occurred while executing a Transact-SQL statement or batch.  (Microsoft.SqlServer.ConnectionInfo\nThe backup set holds a backup of a database other than the existing 'AAA' database.\nRESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)\n\n<!--more-->\n\n###解决方法：\n\n####Step 1\n\n查询备份文件中的逻辑文件名称\n\n```sql\nUSE master\nRESTORE FILELISTONLY\n   FROM DISK = 'C:\\back.Bak'\nGo\n```\n\n####Step 2\n\n利用bak恢复数据库，强制还原`(REPLACE)`。\n`STATS = 10`每完成10%显示一条记录。\n`DBTest`和`DBTest_log`是上面`C:\\back.Bak`里的逻辑文件\n\n```sql\nUSE master\nRESTORE DATABASE DB_Test\n   FROM DISK = 'C:\\back.Bak'\n   WITH MOVE 'DBTest' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB.mdf',\n   MOVE 'DBTest_log' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB_log.ldf',\nSTATS = 10, REPLACE\nGO\n```\n\n到此数据库恢复完毕，在数据库列表中应该会出现名为`DB_Test`的数据库。\n\n>代码中相关参数请参考实际自行修改\n","source":"_posts/20140709-3154ErrorOfSqlServer.md","raw":"title: 'SQL SERVER 2005恢复数据错误（3154）'\ndate: 2014-07-09 20:18:31\ntags:\n  - sql server 2005\n  - 备份还原\ncategories:\n  - Problems\n---\n\n###问题\n\n在**SqlServer2005**的**Management studio**里使用`bak`文件还原数据库的时候总是会发生下面的错误。\n\n![SQL Server restore error](http://images.cnblogs.com/cnblogs_com/adandelion/BACKERROR.GIF)\n\n>Restore failed for Server 'ADANDELI'. (Microsoft.SqlServer.Smo)\nAn exception occurred while executing a Transact-SQL statement or batch.  (Microsoft.SqlServer.ConnectionInfo\nThe backup set holds a backup of a database other than the existing 'AAA' database.\nRESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)\n\n<!--more-->\n\n###解决方法：\n\n####Step 1\n\n查询备份文件中的逻辑文件名称\n\n```sql\nUSE master\nRESTORE FILELISTONLY\n   FROM DISK = 'C:\\back.Bak'\nGo\n```\n\n####Step 2\n\n利用bak恢复数据库，强制还原`(REPLACE)`。\n`STATS = 10`每完成10%显示一条记录。\n`DBTest`和`DBTest_log`是上面`C:\\back.Bak`里的逻辑文件\n\n```sql\nUSE master\nRESTORE DATABASE DB_Test\n   FROM DISK = 'C:\\back.Bak'\n   WITH MOVE 'DBTest' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB.mdf',\n   MOVE 'DBTest_log' TO 'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB_log.ldf',\nSTATS = 10, REPLACE\nGO\n```\n\n到此数据库恢复完毕，在数据库列表中应该会出现名为`DB_Test`的数据库。\n\n>代码中相关参数请参考实际自行修改\n","slug":"20140709-3154ErrorOfSqlServer","published":1,"updated":"2016-07-19T05:52:59.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqt4vt9t0000qglsjlyuf5c7","content":"<p>###问题</p>\n<p>在<strong>SqlServer2005</strong>的<strong>Management studio</strong>里使用<code>bak</code>文件还原数据库的时候总是会发生下面的错误。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/adandelion/BACKERROR.GIF\" alt=\"SQL Server restore error\"></p>\n<blockquote>\n<p>Restore failed for Server ‘ADANDELI’. (Microsoft.SqlServer.Smo)<br>An exception occurred while executing a Transact-SQL statement or batch.  (Microsoft.SqlServer.ConnectionInfo<br>The backup set holds a backup of a database other than the existing ‘AAA’ database.<br>RESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)</p>\n</blockquote>\n<a id=\"more\"></a>\n<p>###解决方法：</p>\n<p>####Step 1</p>\n<p>查询备份文件中的逻辑文件名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">USE</span> <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"keyword\">RESTORE</span> FILELISTONLY</div><div class=\"line\">   <span class=\"keyword\">FROM</span> DISK = <span class=\"string\">'C:\\back.Bak'</span></div><div class=\"line\"><span class=\"keyword\">Go</span></div></pre></td></tr></table></figure>\n<p>####Step 2</p>\n<p>利用bak恢复数据库，强制还原<code>(REPLACE)</code>。<br><code>STATS = 10</code>每完成10%显示一条记录。<br><code>DBTest</code>和<code>DBTest_log</code>是上面<code>C:\\back.Bak</code>里的逻辑文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">USE</span> <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"keyword\">RESTORE</span> <span class=\"keyword\">DATABASE</span> DB_Test</div><div class=\"line\">   <span class=\"keyword\">FROM</span> DISK = <span class=\"string\">'C:\\back.Bak'</span></div><div class=\"line\">   <span class=\"keyword\">WITH</span> <span class=\"keyword\">MOVE</span> <span class=\"string\">'DBTest'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB.mdf'</span>,</div><div class=\"line\">   <span class=\"keyword\">MOVE</span> <span class=\"string\">'DBTest_log'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB_log.ldf'</span>,</div><div class=\"line\">STATS = <span class=\"number\">10</span>, <span class=\"keyword\">REPLACE</span></div><div class=\"line\"><span class=\"keyword\">GO</span></div></pre></td></tr></table></figure>\n<p>到此数据库恢复完毕，在数据库列表中应该会出现名为<code>DB_Test</code>的数据库。</p>\n<blockquote>\n<p>代码中相关参数请参考实际自行修改</p>\n</blockquote>\n","excerpt":"<p>###问题</p>\n<p>在<strong>SqlServer2005</strong>的<strong>Management studio</strong>里使用<code>bak</code>文件还原数据库的时候总是会发生下面的错误。</p>\n<p><img src=\"http://images.cnblogs.com/cnblogs_com/adandelion/BACKERROR.GIF\" alt=\"SQL Server restore error\"></p>\n<blockquote>\n<p>Restore failed for Server ‘ADANDELI’. (Microsoft.SqlServer.Smo)<br>An exception occurred while executing a Transact-SQL statement or batch.  (Microsoft.SqlServer.ConnectionInfo<br>The backup set holds a backup of a database other than the existing ‘AAA’ database.<br>RESTORE DATABASE is terminating abnormally. (Microsoft SQL Server，错误: 3154)</p>\n</blockquote>","more":"<p>###解决方法：</p>\n<p>####Step 1</p>\n<p>查询备份文件中的逻辑文件名称</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">USE</span> <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"keyword\">RESTORE</span> FILELISTONLY</div><div class=\"line\">   <span class=\"keyword\">FROM</span> DISK = <span class=\"string\">'C:\\back.Bak'</span></div><div class=\"line\"><span class=\"keyword\">Go</span></div></pre></td></tr></table></figure>\n<p>####Step 2</p>\n<p>利用bak恢复数据库，强制还原<code>(REPLACE)</code>。<br><code>STATS = 10</code>每完成10%显示一条记录。<br><code>DBTest</code>和<code>DBTest_log</code>是上面<code>C:\\back.Bak</code>里的逻辑文件</p>\n<figure class=\"highlight sql\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"keyword\">USE</span> <span class=\"keyword\">master</span></div><div class=\"line\"><span class=\"keyword\">RESTORE</span> <span class=\"keyword\">DATABASE</span> DB_Test</div><div class=\"line\">   <span class=\"keyword\">FROM</span> DISK = <span class=\"string\">'C:\\back.Bak'</span></div><div class=\"line\">   <span class=\"keyword\">WITH</span> <span class=\"keyword\">MOVE</span> <span class=\"string\">'DBTest'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB.mdf'</span>,</div><div class=\"line\">   <span class=\"keyword\">MOVE</span> <span class=\"string\">'DBTest_log'</span> <span class=\"keyword\">TO</span> <span class=\"string\">'C:\\Program Files\\Microsoft SQL Server2005\\Data\\DB_log.ldf'</span>,</div><div class=\"line\">STATS = <span class=\"number\">10</span>, <span class=\"keyword\">REPLACE</span></div><div class=\"line\"><span class=\"keyword\">GO</span></div></pre></td></tr></table></figure>\n<p>到此数据库恢复完毕，在数据库列表中应该会出现名为<code>DB_Test</code>的数据库。</p>\n<blockquote>\n<p>代码中相关参数请参考实际自行修改</p>\n</blockquote>"},{"title":"Raneto：用Markdown写作、Nodejs搭建的Wiki","date":"2014-07-11T06:30:02.000Z","_content":"\n>最近对**Markdown**很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接**Markdown**记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择[**Raneto**](1)。\n\n## Raneto\n\n### 简单介绍\n\n#### Markdown powered Knowledgebase for Nodejs\n>Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.\n\n- 基于**Nodejs**以及**Express**构建，支持**GFM**的**Markdown**文件，利用**Lunr**进行全文检索。\n- 基于文件目录的URL结构，无需数据库\n- 基于**Bootstrap**的响应式模板，方便多终端访问\n\n### 安装\n\n由于是**Nodejs**应用，安装非常方便。*当然，前提是机器上已有__Nodejs__*\n\n1. 下载托管在**Github**上的**Raneto**代码，这里提供最新的[*Release*版本下载](3)。\n2. 解压，在文件夹内用命令行执行`npm install`安装依赖包。\n3. 命令行执行`npm start`启动应用。\n4. 访问`http://localhost:3000`即可。\n<!--more-->\n\n### 内容管理\n\n默认的内容文件夹为`content`，里面默认已经有了**Raneto**的说明手册，很好的例子。  \n修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。  \n当然，通过修改`config.js`可以自定义`content`文件夹位置和静态图片位置。\n```json\n\t// The base URL of your images folder (can use %image_url% in Markdown files)\n\timage_url: '/images',\n\n\t// Specify the path of your content folder where all your '.md' files are located\n\tcontent_dir: './content/',\n```\n### 其他扩展及问题\n\n目前最理想的使用方法是在**VPS**上结合**Dropbox**来同步`content`和`image`文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。\n\n当然，目前**Raneto**最大的问题是中文支持，其实不应该算**Raneto**的问题，而应该是[**lunrjs**](4)的问题。目前没有中文、日文检索的支持。\n\n查看了**lunrjs**的[*Issues*](https://github.com/olivernn/lunr.js/issues)，发现[*ming300*](https://github.com/ming300)同学针对这个问题已经提过[*Pull Request*](https://github.com/olivernn/lunr.js/pull/96)，有需要可以参考一下。\n> **lunrjs**也有语言支持的插件[**lunr-languages**](https://github.com/MihaiValentin/lunr-languages)，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。\n\n既然检索不了中文，那我就用定义一些`Keyword`来方便检索吧。\n\n\n\n[1]: http://raneto.com/\n[2]: https://github.com/gilbitron/Raneto\n[3]: https://github.com/gilbitron/Raneto/releases\n[4]: http://lunrjs.com/","source":"_posts/20140711-RanetoANodejsWiki.md","raw":"title: Raneto：用Markdown写作、Nodejs搭建的Wiki\ndate: 2014-07-11 14:30:02\ntags:\n  - raneto\n  - wiki\n  - markdown\n  - nodejs\ncategories:\n  - OpenProjects\n---\n\n>最近对**Markdown**很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接**Markdown**记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择[**Raneto**](1)。\n\n## Raneto\n\n### 简单介绍\n\n#### Markdown powered Knowledgebase for Nodejs\n>Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.\n\n- 基于**Nodejs**以及**Express**构建，支持**GFM**的**Markdown**文件，利用**Lunr**进行全文检索。\n- 基于文件目录的URL结构，无需数据库\n- 基于**Bootstrap**的响应式模板，方便多终端访问\n\n### 安装\n\n由于是**Nodejs**应用，安装非常方便。*当然，前提是机器上已有__Nodejs__*\n\n1. 下载托管在**Github**上的**Raneto**代码，这里提供最新的[*Release*版本下载](3)。\n2. 解压，在文件夹内用命令行执行`npm install`安装依赖包。\n3. 命令行执行`npm start`启动应用。\n4. 访问`http://localhost:3000`即可。\n<!--more-->\n\n### 内容管理\n\n默认的内容文件夹为`content`，里面默认已经有了**Raneto**的说明手册，很好的例子。  \n修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。  \n当然，通过修改`config.js`可以自定义`content`文件夹位置和静态图片位置。\n```json\n\t// The base URL of your images folder (can use %image_url% in Markdown files)\n\timage_url: '/images',\n\n\t// Specify the path of your content folder where all your '.md' files are located\n\tcontent_dir: './content/',\n```\n### 其他扩展及问题\n\n目前最理想的使用方法是在**VPS**上结合**Dropbox**来同步`content`和`image`文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。\n\n当然，目前**Raneto**最大的问题是中文支持，其实不应该算**Raneto**的问题，而应该是[**lunrjs**](4)的问题。目前没有中文、日文检索的支持。\n\n查看了**lunrjs**的[*Issues*](https://github.com/olivernn/lunr.js/issues)，发现[*ming300*](https://github.com/ming300)同学针对这个问题已经提过[*Pull Request*](https://github.com/olivernn/lunr.js/pull/96)，有需要可以参考一下。\n> **lunrjs**也有语言支持的插件[**lunr-languages**](https://github.com/MihaiValentin/lunr-languages)，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。\n\n既然检索不了中文，那我就用定义一些`Keyword`来方便检索吧。\n\n\n\n[1]: http://raneto.com/\n[2]: https://github.com/gilbitron/Raneto\n[3]: https://github.com/gilbitron/Raneto/releases\n[4]: http://lunrjs.com/","slug":"20140711-RanetoANodejsWiki","published":1,"updated":"2016-07-19T05:52:59.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqt4vt9y0002qgls4j5br5v9","content":"<blockquote>\n<p>最近对<strong>Markdown</strong>很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接<strong>Markdown</strong>记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择<a href=\"1\"><strong>Raneto</strong></a>。</p>\n</blockquote>\n<h2 id=\"Raneto\"><a href=\"#Raneto\" class=\"headerlink\" title=\"Raneto\"></a>Raneto</h2><h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><h4 id=\"Markdown-powered-Knowledgebase-for-Nodejs\"><a href=\"#Markdown-powered-Knowledgebase-for-Nodejs\" class=\"headerlink\" title=\"Markdown powered Knowledgebase for Nodejs\"></a>Markdown powered Knowledgebase for Nodejs</h4><blockquote>\n<p>Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.</p>\n</blockquote>\n<ul>\n<li>基于<strong>Nodejs</strong>以及<strong>Express</strong>构建，支持<strong>GFM</strong>的<strong>Markdown</strong>文件，利用<strong>Lunr</strong>进行全文检索。</li>\n<li>基于文件目录的URL结构，无需数据库</li>\n<li>基于<strong>Bootstrap</strong>的响应式模板，方便多终端访问</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>由于是<strong>Nodejs</strong>应用，安装非常方便。<em>当然，前提是机器上已有<strong>Nodejs</strong></em></p>\n<ol>\n<li>下载托管在<strong>Github</strong>上的<strong>Raneto</strong>代码，这里提供最新的<a href=\"3\"><em>Release</em>版本下载</a>。</li>\n<li>解压，在文件夹内用命令行执行<code>npm install</code>安装依赖包。</li>\n<li>命令行执行<code>npm start</code>启动应用。</li>\n<li>访问<code>http://localhost:3000</code>即可。<a id=\"more\"></a>\n</li>\n</ol>\n<h3 id=\"内容管理\"><a href=\"#内容管理\" class=\"headerlink\" title=\"内容管理\"></a>内容管理</h3><p>默认的内容文件夹为<code>content</code>，里面默认已经有了<strong>Raneto</strong>的说明手册，很好的例子。<br>修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。<br>当然，通过修改<code>config.js</code>可以自定义<code>content</code>文件夹位置和静态图片位置。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// The base URL of your images folder (can use %image_url% in Markdown files)</div><div class=\"line\">image_url: '/images',</div><div class=\"line\"></div><div class=\"line\">// Specify the path of your content folder where all your '.md' files are located</div><div class=\"line\">content_dir: './content/',</div></pre></td></tr></table></figure></p>\n<h3 id=\"其他扩展及问题\"><a href=\"#其他扩展及问题\" class=\"headerlink\" title=\"其他扩展及问题\"></a>其他扩展及问题</h3><p>目前最理想的使用方法是在<strong>VPS</strong>上结合<strong>Dropbox</strong>来同步<code>content</code>和<code>image</code>文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。</p>\n<p>当然，目前<strong>Raneto</strong>最大的问题是中文支持，其实不应该算<strong>Raneto</strong>的问题，而应该是<a href=\"4\"><strong>lunrjs</strong></a>的问题。目前没有中文、日文检索的支持。</p>\n<p>查看了<strong>lunrjs</strong>的<a href=\"https://github.com/olivernn/lunr.js/issues\" target=\"_blank\" rel=\"external\"><em>Issues</em></a>，发现<a href=\"https://github.com/ming300\" target=\"_blank\" rel=\"external\"><em>ming300</em></a>同学针对这个问题已经提过<a href=\"https://github.com/olivernn/lunr.js/pull/96\" target=\"_blank\" rel=\"external\"><em>Pull Request</em></a>，有需要可以参考一下。</p>\n<blockquote>\n<p><strong>lunrjs</strong>也有语言支持的插件<a href=\"https://github.com/MihaiValentin/lunr-languages\" target=\"_blank\" rel=\"external\"><strong>lunr-languages</strong></a>，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。</p>\n</blockquote>\n<p>既然检索不了中文，那我就用定义一些<code>Keyword</code>来方便检索吧。</p>\n","excerpt":"<blockquote>\n<p>最近对<strong>Markdown</strong>很感兴趣，刚在Github上搭建了这个站点，用来记录平时的一些技巧心得。但是还有一些属于经常用到的，可以不断套用的东西，用现在这个站来记录的话，查找起来比较麻烦。因此，想找一款能直接<strong>Markdown</strong>记录，用树形结构组织，支持全文检索的Wiki软件。Github上搜了一圈，对比了几个Repo，最终选择<a href=\"1\"><strong>Raneto</strong></a>。</p>\n</blockquote>\n<h2 id=\"Raneto\"><a href=\"#Raneto\" class=\"headerlink\" title=\"Raneto\"></a>Raneto</h2><h3 id=\"简单介绍\"><a href=\"#简单介绍\" class=\"headerlink\" title=\"简单介绍\"></a>简单介绍</h3><h4 id=\"Markdown-powered-Knowledgebase-for-Nodejs\"><a href=\"#Markdown-powered-Knowledgebase-for-Nodejs\" class=\"headerlink\" title=\"Markdown powered Knowledgebase for Nodejs\"></a>Markdown powered Knowledgebase for Nodejs</h4><blockquote>\n<p>Raneto is an open source Knowledgebase platform that uses static Markdown files to power your Knowledgebase.</p>\n</blockquote>\n<ul>\n<li>基于<strong>Nodejs</strong>以及<strong>Express</strong>构建，支持<strong>GFM</strong>的<strong>Markdown</strong>文件，利用<strong>Lunr</strong>进行全文检索。</li>\n<li>基于文件目录的URL结构，无需数据库</li>\n<li>基于<strong>Bootstrap</strong>的响应式模板，方便多终端访问</li>\n</ul>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>由于是<strong>Nodejs</strong>应用，安装非常方便。<em>当然，前提是机器上已有<strong>Nodejs</strong></em></p>\n<ol>\n<li>下载托管在<strong>Github</strong>上的<strong>Raneto</strong>代码，这里提供最新的<a href=\"3\"><em>Release</em>版本下载</a>。</li>\n<li>解压，在文件夹内用命令行执行<code>npm install</code>安装依赖包。</li>\n<li>命令行执行<code>npm start</code>启动应用。</li>\n<li>访问<code>http://localhost:3000</code>即可。","more":"</li>\n</ol>\n<h3 id=\"内容管理\"><a href=\"#内容管理\" class=\"headerlink\" title=\"内容管理\"></a>内容管理</h3><p>默认的内容文件夹为<code>content</code>，里面默认已经有了<strong>Raneto</strong>的说明手册，很好的例子。<br>修改文件名或者文件夹名称可以改变对应的URL，只要浏览器刷新整个结构貌似就会重建，这点非常强大，修改文件内容也是一样，刷新就显示。<br>当然，通过修改<code>config.js</code>可以自定义<code>content</code>文件夹位置和静态图片位置。<br><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">// The base URL of your images folder (can use %image_url% in Markdown files)</div><div class=\"line\">image_url: '/images',</div><div class=\"line\"></div><div class=\"line\">// Specify the path of your content folder where all your '.md' files are located</div><div class=\"line\">content_dir: './content/',</div></pre></td></tr></table></figure></p>\n<h3 id=\"其他扩展及问题\"><a href=\"#其他扩展及问题\" class=\"headerlink\" title=\"其他扩展及问题\"></a>其他扩展及问题</h3><p>目前最理想的使用方法是在<strong>VPS</strong>上结合<strong>Dropbox</strong>来同步<code>content</code>和<code>image</code>文件夹，这样的话就可以从任意终端来更新访问了，感觉会非常方便。</p>\n<p>当然，目前<strong>Raneto</strong>最大的问题是中文支持，其实不应该算<strong>Raneto</strong>的问题，而应该是<a href=\"4\"><strong>lunrjs</strong></a>的问题。目前没有中文、日文检索的支持。</p>\n<p>查看了<strong>lunrjs</strong>的<a href=\"https://github.com/olivernn/lunr.js/issues\"><em>Issues</em></a>，发现<a href=\"https://github.com/ming300\"><em>ming300</em></a>同学针对这个问题已经提过<a href=\"https://github.com/olivernn/lunr.js/pull/96\"><em>Pull Request</em></a>，有需要可以参考一下。</p>\n<blockquote>\n<p><strong>lunrjs</strong>也有语言支持的插件<a href=\"https://github.com/MihaiValentin/lunr-languages\"><strong>lunr-languages</strong></a>，但是也很遗憾，还没有中文的支持，下次研究一下，看看能不能搞一个提交上去。</p>\n</blockquote>\n<p>既然检索不了中文，那我就用定义一些<code>Keyword</code>来方便检索吧。</p>"},{"title":"开始使用Hexo","date":"2014-07-08T02:23:38.000Z","_content":"\n原来网站是**wordpress**的，用的也是免费空间[**000webhost**][1]。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐[**000webhost**][1]。\n>关于**000webhost**，注册可能会麻烦一点，需要挂**VPN**或者使用代理，具体方法可自行Google。\n\n###初识Hexo\n\n一开始只是想用**Markdown**来写博客，但是**wordpress**本身对**Markdown**还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个**Markdown**新手来说，很不放心。\n\n最近逛**v2ex**的时候也经常看到**Github**上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的**Markdown**加上**Github**这个无限免费的平台，非常有吸引力。\n\n在**Github**上发布博客的工具也不少，目前最流行**jekyll**和**octopress**，但都是基于Ruby的，而**Hexo**是基于**nodejs**，\n且生成速度更快，所以毫不犹豫的选择了**Hexo**。\n<!--more-->\n###在Windows和Mac上安装Hexo\n\n原来机器上就已经有**nodejs**、**git**环境了，所以安装**Hexo**就非常简单，一句代码就搞定了。  \n`npm install hexo -g`\n\n\n然后就按照[**官网设置手册**](http://hexo.io/docs/)一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。\n\n###配置Hexo\n\n初识情况下**Hexo**就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：  \n`language: zh-CN`  \n日期格式原来英文的，不太适应，也顺便改了一下：  \n`date_format: YYYY-MM-D`  \n剩下的就默认，最后安装了下面两个插件：  \n```\n\"hexo-generator-feed\": \"^0.1.2\",  \n\"hexo-generator-sitemap\": \"~0.1.4\"\n```\n\n主题的话，官方也提供了很多，<https://github.com/hexojs/hexo/wiki/Themes>，选择一个合适的，然后稍做修改即可。\n\n我把整个文件夹`Github Page`也作为一个`Repo`同步了，这样的话不管是**Windows**上面还是**Mac**上面都可以同步修改了，比较方便。\n>当然利用各种云盘同步也不错，我懒得装客户端了，就直接**Git**了。\n\n###问题点\n\n目前觉得最麻烦的还是每次发布必须在电脑上执行一下`hexo d`，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。\n\n下一步准备弄个**VPS**，把**Hexo**部署在上面，然后用同步盘同步到**VPS**后定时执行`hexo g`、`hexo d`应该就可以了吧。\n\n目前就这么多内容，下次想到什么再补充吧。\n\n[1]: http://www.000webhost.com","source":"_posts/Hexo-started.md","raw":"title: '开始使用Hexo'\ndate: 2014-07-08 10:23:38\ntags: \n  - hexo\n  - github\n  - nodejs\n  - markdown\ncategories:\n  - OpenProjects\n---\n\n原来网站是**wordpress**的，用的也是免费空间[**000webhost**][1]。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐[**000webhost**][1]。\n>关于**000webhost**，注册可能会麻烦一点，需要挂**VPN**或者使用代理，具体方法可自行Google。\n\n###初识Hexo\n\n一开始只是想用**Markdown**来写博客，但是**wordpress**本身对**Markdown**还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个**Markdown**新手来说，很不放心。\n\n最近逛**v2ex**的时候也经常看到**Github**上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的**Markdown**加上**Github**这个无限免费的平台，非常有吸引力。\n\n在**Github**上发布博客的工具也不少，目前最流行**jekyll**和**octopress**，但都是基于Ruby的，而**Hexo**是基于**nodejs**，\n且生成速度更快，所以毫不犹豫的选择了**Hexo**。\n<!--more-->\n###在Windows和Mac上安装Hexo\n\n原来机器上就已经有**nodejs**、**git**环境了，所以安装**Hexo**就非常简单，一句代码就搞定了。  \n`npm install hexo -g`\n\n\n然后就按照[**官网设置手册**](http://hexo.io/docs/)一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。\n\n###配置Hexo\n\n初识情况下**Hexo**就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：  \n`language: zh-CN`  \n日期格式原来英文的，不太适应，也顺便改了一下：  \n`date_format: YYYY-MM-D`  \n剩下的就默认，最后安装了下面两个插件：  \n```\n\"hexo-generator-feed\": \"^0.1.2\",  \n\"hexo-generator-sitemap\": \"~0.1.4\"\n```\n\n主题的话，官方也提供了很多，<https://github.com/hexojs/hexo/wiki/Themes>，选择一个合适的，然后稍做修改即可。\n\n我把整个文件夹`Github Page`也作为一个`Repo`同步了，这样的话不管是**Windows**上面还是**Mac**上面都可以同步修改了，比较方便。\n>当然利用各种云盘同步也不错，我懒得装客户端了，就直接**Git**了。\n\n###问题点\n\n目前觉得最麻烦的还是每次发布必须在电脑上执行一下`hexo d`，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。\n\n下一步准备弄个**VPS**，把**Hexo**部署在上面，然后用同步盘同步到**VPS**后定时执行`hexo g`、`hexo d`应该就可以了吧。\n\n目前就这么多内容，下次想到什么再补充吧。\n\n[1]: http://www.000webhost.com","slug":"Hexo-started","published":1,"updated":"2016-07-19T05:52:59.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqt4vta60005qglsf3d6b4ex","content":"<p>原来网站是<strong>wordpress</strong>的，用的也是免费空间<a href=\"http://www.000webhost.com\" target=\"_blank\" rel=\"external\"><strong>000webhost</strong></a>。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐<a href=\"http://www.000webhost.com\" target=\"_blank\" rel=\"external\"><strong>000webhost</strong></a>。</p>\n<blockquote>\n<p>关于<strong>000webhost</strong>，注册可能会麻烦一点，需要挂<strong>VPN</strong>或者使用代理，具体方法可自行Google。</p>\n</blockquote>\n<p>###初识Hexo</p>\n<p>一开始只是想用<strong>Markdown</strong>来写博客，但是<strong>wordpress</strong>本身对<strong>Markdown</strong>还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个<strong>Markdown</strong>新手来说，很不放心。</p>\n<p>最近逛<strong>v2ex</strong>的时候也经常看到<strong>Github</strong>上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的<strong>Markdown</strong>加上<strong>Github</strong>这个无限免费的平台，非常有吸引力。</p>\n<p>在<strong>Github</strong>上发布博客的工具也不少，目前最流行<strong>jekyll</strong>和<strong>octopress</strong>，但都是基于Ruby的，而<strong>Hexo</strong>是基于<strong>nodejs</strong>，<br>且生成速度更快，所以毫不犹豫的选择了<strong>Hexo</strong>。<br><a id=\"more\"></a></p>\n<p>###在Windows和Mac上安装Hexo</p>\n<p>原来机器上就已经有<strong>nodejs</strong>、<strong>git</strong>环境了，所以安装<strong>Hexo</strong>就非常简单，一句代码就搞定了。<br><code>npm install hexo -g</code></p>\n<p>然后就按照<a href=\"http://hexo.io/docs/\" target=\"_blank\" rel=\"external\"><strong>官网设置手册</strong></a>一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。</p>\n<p>###配置Hexo</p>\n<p>初识情况下<strong>Hexo</strong>就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：<br><code>language: zh-CN</code><br>日期格式原来英文的，不太适应，也顺便改了一下：<br><code>date_format: YYYY-MM-D</code><br>剩下的就默认，最后安装了下面两个插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;hexo-generator-feed&quot;: &quot;^0.1.2&quot;,  </div><div class=\"line\">&quot;hexo-generator-sitemap&quot;: &quot;~0.1.4&quot;</div></pre></td></tr></table></figure></p>\n<p>主题的话，官方也提供了很多，<a href=\"https://github.com/hexojs/hexo/wiki/Themes\" target=\"_blank\" rel=\"external\">https://github.com/hexojs/hexo/wiki/Themes</a>，选择一个合适的，然后稍做修改即可。</p>\n<p>我把整个文件夹<code>Github Page</code>也作为一个<code>Repo</code>同步了，这样的话不管是<strong>Windows</strong>上面还是<strong>Mac</strong>上面都可以同步修改了，比较方便。</p>\n<blockquote>\n<p>当然利用各种云盘同步也不错，我懒得装客户端了，就直接<strong>Git</strong>了。</p>\n</blockquote>\n<p>###问题点</p>\n<p>目前觉得最麻烦的还是每次发布必须在电脑上执行一下<code>hexo d</code>，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。</p>\n<p>下一步准备弄个<strong>VPS</strong>，把<strong>Hexo</strong>部署在上面，然后用同步盘同步到<strong>VPS</strong>后定时执行<code>hexo g</code>、<code>hexo d</code>应该就可以了吧。</p>\n<p>目前就这么多内容，下次想到什么再补充吧。</p>\n","excerpt":"<p>原来网站是<strong>wordpress</strong>的，用的也是免费空间<a href=\"http://www.000webhost.com\"><strong>000webhost</strong></a>。服务的稳定性还算不错，已经用了几年了，除了偶尔抽风down机之外，作为免费的空间来说还是很不错的。如果有同学要稳定的免费空间，推荐<a href=\"http://www.000webhost.com\"><strong>000webhost</strong></a>。</p>\n<blockquote>\n<p>关于<strong>000webhost</strong>，注册可能会麻烦一点，需要挂<strong>VPN</strong>或者使用代理，具体方法可自行Google。</p>\n</blockquote>\n<p>###初识Hexo</p>\n<p>一开始只是想用<strong>Markdown</strong>来写博客，但是<strong>wordpress</strong>本身对<strong>Markdown</strong>还不能支持，试了几个插件，效果都不是那么理想，在线编辑也都不支持预览，这对于一个<strong>Markdown</strong>新手来说，很不放心。</p>\n<p>最近逛<strong>v2ex</strong>的时候也经常看到<strong>Github</strong>上搭建的静态博客。作为一个业余码农，博客更多的是记录一些平常碰到的技术问题和自己的一些学习心得，所以一个能够专注于文字和代码的<strong>Markdown</strong>加上<strong>Github</strong>这个无限免费的平台，非常有吸引力。</p>\n<p>在<strong>Github</strong>上发布博客的工具也不少，目前最流行<strong>jekyll</strong>和<strong>octopress</strong>，但都是基于Ruby的，而<strong>Hexo</strong>是基于<strong>nodejs</strong>，<br>且生成速度更快，所以毫不犹豫的选择了<strong>Hexo</strong>。<br>","more":"</p>\n<p>###在Windows和Mac上安装Hexo</p>\n<p>原来机器上就已经有<strong>nodejs</strong>、<strong>git</strong>环境了，所以安装<strong>Hexo</strong>就非常简单，一句代码就搞定了。<br><code>npm install hexo -g</code></p>\n<p>然后就按照<a href=\"http://hexo.io/docs/\"><strong>官网设置手册</strong></a>一步步设置就行，非常简单，并且网上资料也很多，随便一个问题都能Google到答案。</p>\n<p>###配置Hexo</p>\n<p>初识情况下<strong>Hexo</strong>就能非常完美的运行了，当然，作为中文用户来说，首先设置一下语言选项：<br><code>language: zh-CN</code><br>日期格式原来英文的，不太适应，也顺便改了一下：<br><code>date_format: YYYY-MM-D</code><br>剩下的就默认，最后安装了下面两个插件：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">&quot;hexo-generator-feed&quot;: &quot;^0.1.2&quot;,  </div><div class=\"line\">&quot;hexo-generator-sitemap&quot;: &quot;~0.1.4&quot;</div></pre></td></tr></table></figure></p>\n<p>主题的话，官方也提供了很多，<a href=\"https://github.com/hexojs/hexo/wiki/Themes\">https://github.com/hexojs/hexo/wiki/Themes</a>，选择一个合适的，然后稍做修改即可。</p>\n<p>我把整个文件夹<code>Github Page</code>也作为一个<code>Repo</code>同步了，这样的话不管是<strong>Windows</strong>上面还是<strong>Mac</strong>上面都可以同步修改了，比较方便。</p>\n<blockquote>\n<p>当然利用各种云盘同步也不错，我懒得装客户端了，就直接<strong>Git</strong>了。</p>\n</blockquote>\n<p>###问题点</p>\n<p>目前觉得最麻烦的还是每次发布必须在电脑上执行一下<code>hexo d</code>，用其他电脑想发布新内容的话会比较麻烦，更不用说移动设备了。</p>\n<p>下一步准备弄个<strong>VPS</strong>，把<strong>Hexo</strong>部署在上面，然后用同步盘同步到<strong>VPS</strong>后定时执行<code>hexo g</code>、<code>hexo d</code>应该就可以了吧。</p>\n<p>目前就这么多内容，下次想到什么再补充吧。</p>"},{"title":"通过VPS自动发布HEXO","date":"2014-12-31T05:00:00.000Z","_content":"\n之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到**github**或者**gitcafe**上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。\n\n之前刚好看到**Bandwagon Host**的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。\n\n下面该VPS的详细配置，年付`$9.99`，相当便宜了。\n[直达链接（我的小尾巴~）](https://bandwagonhost.com/aff.php?aff=1604&pid=22)\n>**Basic VPS - Unmanaged - 5G PROMO V2**\n>Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee\n\n既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。\n![脑图](http://pubshare.qiniudn.com/sumw3hexo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.png)\n\n<!--more-->\n\n###GIT@OSC通知VPS更新\n前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。\n\n对比几个国内的代码托管网站，最终我选择了*开源中国*的GIT（**GIT@OSC**），这也是我平常用得最多的代码托管网站。**GIT@OSC**提供了了一个非常好用的功能：*PUSH钩子*。\n![PUSH钩子](http://pubshare.qiniudn.com/sumw3%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-31%20%E4%B8%8B%E5%8D%882.04.21.png)\n只要在钩子地址中填入对应的服务器地址，每次**GIT@OSC**收到新的**PUSH**的时候都会自动发一个**POST**请求至该地址，内容为该次**PUSH**的具体信息及**PUSH钩子**中设置的密码。\n\n因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。\n\n###VPS获取通知执行批处理\n\n####获取通知\n\n##### 1. nginx配置\n\n获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。\n\n由于我VPS选用的是`Ubuntu`，所以安装nginx也非常简单，直接执行一下命令。\n```bash\n$ sudo apt-get install nginx \n```\n修改`/etc/nginx/sites-available/default`文件，增加路由让其转发对应地址的请求至Python程序。\n```xml\nlocation /update {\n        proxy_pass http://127.0.0.1:1111;\n    }\n```\n重启nginx：\n```bash\n$ sudo /etc/init.d/nginx restart\n```\n\n##### 2. Python配置\n\n代码如下：\n```python\n#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n# start a python service and watch the nginx request dog\n\nfrom http.server import HTTPServer,CGIHTTPRequestHandler\nfrom threading import Thread,RLock\nimport subprocess\nimport logging\nimport sys\nimport os.path\n\n\n_PWD=os.path.abspath(os.path.dirname(__file__))\ndef execute_cmd(args,cwd=None,timeout=30):\n    if isinstance(args,str): args = [args]\n    try:\n        with subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) as proc:\n            try:\n                output,unused_err = proc.communicate(timeout=timeout)\n            except:\n                proc.kill()\n                raise\n            retcode = proc.poll()\n            if retcode:\n                raise subprocess.CalledProcessError(retcode, proc.args, output=output)\n            return output.decode('utf-8','ignore') if output else ''\n    except Exception as ex:\n        logging.error('EXECUTE_CMD_ERROR: %s',' '.join(str(x) for x in args))\n        raise ex\n\nclass HttpHandler(CGIHTTPRequestHandler):\n    _lock = RLock()\n    _counter = 0\n    _building = False\n\n    def build(self):\n        with HttpHandler._lock:\n            if HttpHandler._counter == 0 or HttpHandler._building:\n                return\n        HttpHandler._counter = 0\n        HttpHandler._building = True\n        logging.info(\"BUILDING NOW...\")\n        try:\n            resp = execute_cmd(os.path.join(_PWD,'build.sh'),cwd=_PWD,timeout=600)\n            logging.info(resp)\n        finally:\n            HttpHandler._building = False\n            self.build()\n\n    def do_GET(self):\n        self.do_POST()\n    def do_POST(self):\n        self.send_response(200,'OK')\n        self.end_headers()\n        self.wfile.write(b'OK')\n        self.wfile.flush()\n        with HttpHandler._lock:\n            HttpHandler._counter += 1\n        Thread(target=self.build).start()\n\nif __name__ == '__main__':\n    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',level=logging.INFO)\n\n    port = int(sys.argv[1]) if len(sys.argv) > 1 else 1111\n    logging.info('starting the server at 127.0.0.1:%s',port)\n    httpd = HTTPServer(('127.0.0.1',port),HttpHandler)\n    httpd.serve_forever()\n```\n\n将Python文件`hook.py`和对应的批处理文件`build.sh`都放置在hexo的目录下，启动Python监听：\n```bash\n$ nohup python3 hook.py >> /tmp/hook.log 2>&1 &\n```\n\n####批处理Shell\n```bash\n#!/bin/bash\n\necho \"build at `date`\"\n. ~/.nvm/nvm.sh\nnvm use 0.10.35\ngit pull\nhexo g --d\necho \"built successfully\"\n```\n\n当然，为了让Python能够正确执行脚本，还需要执行一下命令：\n```bash\n$ sudo chmod +x build.sh\n```\n\n----------\n\n到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及**github**的日志，没有问题，都成功了。\n\n以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。","source":"_posts/HexoAutoDeploy.md","raw":"title: '通过VPS自动发布HEXO'\ndate: 2014-12-31 13:00:00\ntags:\n  - vps\n  - hexo\n  - git\ncategories:\n - OpenProjects\n---\n\n之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到**github**或者**gitcafe**上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。\n\n之前刚好看到**Bandwagon Host**的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。\n\n下面该VPS的详细配置，年付`$9.99`，相当便宜了。\n[直达链接（我的小尾巴~）](https://bandwagonhost.com/aff.php?aff=1604&pid=22)\n>**Basic VPS - Unmanaged - 5G PROMO V2**\n>Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee\n\n既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。\n![脑图](http://pubshare.qiniudn.com/sumw3hexo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.png)\n\n<!--more-->\n\n###GIT@OSC通知VPS更新\n前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。\n\n对比几个国内的代码托管网站，最终我选择了*开源中国*的GIT（**GIT@OSC**），这也是我平常用得最多的代码托管网站。**GIT@OSC**提供了了一个非常好用的功能：*PUSH钩子*。\n![PUSH钩子](http://pubshare.qiniudn.com/sumw3%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-31%20%E4%B8%8B%E5%8D%882.04.21.png)\n只要在钩子地址中填入对应的服务器地址，每次**GIT@OSC**收到新的**PUSH**的时候都会自动发一个**POST**请求至该地址，内容为该次**PUSH**的具体信息及**PUSH钩子**中设置的密码。\n\n因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。\n\n###VPS获取通知执行批处理\n\n####获取通知\n\n##### 1. nginx配置\n\n获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。\n\n由于我VPS选用的是`Ubuntu`，所以安装nginx也非常简单，直接执行一下命令。\n```bash\n$ sudo apt-get install nginx \n```\n修改`/etc/nginx/sites-available/default`文件，增加路由让其转发对应地址的请求至Python程序。\n```xml\nlocation /update {\n        proxy_pass http://127.0.0.1:1111;\n    }\n```\n重启nginx：\n```bash\n$ sudo /etc/init.d/nginx restart\n```\n\n##### 2. Python配置\n\n代码如下：\n```python\n#!/usr/bin/env python3\n#-*- coding:utf-8 -*-\n# start a python service and watch the nginx request dog\n\nfrom http.server import HTTPServer,CGIHTTPRequestHandler\nfrom threading import Thread,RLock\nimport subprocess\nimport logging\nimport sys\nimport os.path\n\n\n_PWD=os.path.abspath(os.path.dirname(__file__))\ndef execute_cmd(args,cwd=None,timeout=30):\n    if isinstance(args,str): args = [args]\n    try:\n        with subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) as proc:\n            try:\n                output,unused_err = proc.communicate(timeout=timeout)\n            except:\n                proc.kill()\n                raise\n            retcode = proc.poll()\n            if retcode:\n                raise subprocess.CalledProcessError(retcode, proc.args, output=output)\n            return output.decode('utf-8','ignore') if output else ''\n    except Exception as ex:\n        logging.error('EXECUTE_CMD_ERROR: %s',' '.join(str(x) for x in args))\n        raise ex\n\nclass HttpHandler(CGIHTTPRequestHandler):\n    _lock = RLock()\n    _counter = 0\n    _building = False\n\n    def build(self):\n        with HttpHandler._lock:\n            if HttpHandler._counter == 0 or HttpHandler._building:\n                return\n        HttpHandler._counter = 0\n        HttpHandler._building = True\n        logging.info(\"BUILDING NOW...\")\n        try:\n            resp = execute_cmd(os.path.join(_PWD,'build.sh'),cwd=_PWD,timeout=600)\n            logging.info(resp)\n        finally:\n            HttpHandler._building = False\n            self.build()\n\n    def do_GET(self):\n        self.do_POST()\n    def do_POST(self):\n        self.send_response(200,'OK')\n        self.end_headers()\n        self.wfile.write(b'OK')\n        self.wfile.flush()\n        with HttpHandler._lock:\n            HttpHandler._counter += 1\n        Thread(target=self.build).start()\n\nif __name__ == '__main__':\n    logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',level=logging.INFO)\n\n    port = int(sys.argv[1]) if len(sys.argv) > 1 else 1111\n    logging.info('starting the server at 127.0.0.1:%s',port)\n    httpd = HTTPServer(('127.0.0.1',port),HttpHandler)\n    httpd.serve_forever()\n```\n\n将Python文件`hook.py`和对应的批处理文件`build.sh`都放置在hexo的目录下，启动Python监听：\n```bash\n$ nohup python3 hook.py >> /tmp/hook.log 2>&1 &\n```\n\n####批处理Shell\n```bash\n#!/bin/bash\n\necho \"build at `date`\"\n. ~/.nvm/nvm.sh\nnvm use 0.10.35\ngit pull\nhexo g --d\necho \"built successfully\"\n```\n\n当然，为了让Python能够正确执行脚本，还需要执行一下命令：\n```bash\n$ sudo chmod +x build.sh\n```\n\n----------\n\n到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及**github**的日志，没有问题，都成功了。\n\n以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。","slug":"HexoAutoDeploy","published":1,"updated":"2016-07-19T05:52:59.229Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ciqt4vta60006qglsnvtbuoc4","content":"<p>之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到<strong>github</strong>或者<strong>gitcafe</strong>上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。</p>\n<p>之前刚好看到<strong>Bandwagon Host</strong>的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。</p>\n<p>下面该VPS的详细配置，年付<code>$9.99</code>，相当便宜了。<br><a href=\"https://bandwagonhost.com/aff.php?aff=1604&amp;pid=22\" target=\"_blank\" rel=\"external\">直达链接（我的小尾巴~）</a></p>\n<blockquote>\n<p><strong>Basic VPS - Unmanaged - 5G PROMO V2</strong><br>Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee</p>\n</blockquote>\n<p>既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。<br><img src=\"http://pubshare.qiniudn.com/sumw3hexo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.png\" alt=\"脑图\"></p>\n<a id=\"more\"></a>\n<p>###GIT@OSC通知VPS更新<br>前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。</p>\n<p>对比几个国内的代码托管网站，最终我选择了<em>开源中国</em>的GIT（<strong>GIT@OSC</strong>），这也是我平常用得最多的代码托管网站。<strong>GIT@OSC</strong>提供了了一个非常好用的功能：<em>PUSH钩子</em>。<br><img src=\"http://pubshare.qiniudn.com/sumw3%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-31%20%E4%B8%8B%E5%8D%882.04.21.png\" alt=\"PUSH钩子\"><br>只要在钩子地址中填入对应的服务器地址，每次<strong>GIT@OSC</strong>收到新的<strong>PUSH</strong>的时候都会自动发一个<strong>POST</strong>请求至该地址，内容为该次<strong>PUSH</strong>的具体信息及<strong>PUSH钩子</strong>中设置的密码。</p>\n<p>因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。</p>\n<p>###VPS获取通知执行批处理</p>\n<p>####获取通知</p>\n<h5 id=\"1-nginx配置\"><a href=\"#1-nginx配置\" class=\"headerlink\" title=\"1. nginx配置\"></a>1. nginx配置</h5><p>获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。</p>\n<p>由于我VPS选用的是<code>Ubuntu</code>，所以安装nginx也非常简单，直接执行一下命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install nginx</div></pre></td></tr></table></figure></p>\n<p>修改<code>/etc/nginx/sites-available/default</code>文件，增加路由让其转发对应地址的请求至Python程序。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /update &#123;</div><div class=\"line\">        proxy_pass http://127.0.0.1:1111;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-Python配置\"><a href=\"#2-Python配置\" class=\"headerlink\" title=\"2. Python配置\"></a>2. Python配置</h5><p>代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># start a python service and watch the nginx request dog</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> http.server <span class=\"keyword\">import</span> HTTPServer,CGIHTTPRequestHandler</div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,RLock</div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">_PWD=os.path.abspath(os.path.dirname(__file__))</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute_cmd</span><span class=\"params\">(args,cwd=None,timeout=<span class=\"number\">30</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> isinstance(args,str): args = [args]</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">with</span> subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) <span class=\"keyword\">as</span> proc:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                output,unused_err = proc.communicate(timeout=timeout)</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                proc.kill()</div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\">            retcode = proc.poll()</div><div class=\"line\">            <span class=\"keyword\">if</span> retcode:</div><div class=\"line\">                <span class=\"keyword\">raise</span> subprocess.CalledProcessError(retcode, proc.args, output=output)</div><div class=\"line\">            <span class=\"keyword\">return</span> output.decode(<span class=\"string\">'utf-8'</span>,<span class=\"string\">'ignore'</span>) <span class=\"keyword\">if</span> output <span class=\"keyword\">else</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ex:</div><div class=\"line\">        logging.error(<span class=\"string\">'EXECUTE_CMD_ERROR: %s'</span>,<span class=\"string\">' '</span>.join(str(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args))</div><div class=\"line\">        <span class=\"keyword\">raise</span> ex</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpHandler</span><span class=\"params\">(CGIHTTPRequestHandler)</span>:</span></div><div class=\"line\">    _lock = RLock()</div><div class=\"line\">    _counter = <span class=\"number\">0</span></div><div class=\"line\">    _building = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">with</span> HttpHandler._lock:</div><div class=\"line\">            <span class=\"keyword\">if</span> HttpHandler._counter == <span class=\"number\">0</span> <span class=\"keyword\">or</span> HttpHandler._building:</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">        HttpHandler._counter = <span class=\"number\">0</span></div><div class=\"line\">        HttpHandler._building = <span class=\"keyword\">True</span></div><div class=\"line\">        logging.info(<span class=\"string\">\"BUILDING NOW...\"</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            resp = execute_cmd(os.path.join(_PWD,<span class=\"string\">'build.sh'</span>),cwd=_PWD,timeout=<span class=\"number\">600</span>)</div><div class=\"line\">            logging.info(resp)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            HttpHandler._building = <span class=\"keyword\">False</span></div><div class=\"line\">            self.build()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.do_POST()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_POST</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.send_response(<span class=\"number\">200</span>,<span class=\"string\">'OK'</span>)</div><div class=\"line\">        self.end_headers()</div><div class=\"line\">        self.wfile.write(<span class=\"string\">b'OK'</span>)</div><div class=\"line\">        self.wfile.flush()</div><div class=\"line\">        <span class=\"keyword\">with</span> HttpHandler._lock:</div><div class=\"line\">            HttpHandler._counter += <span class=\"number\">1</span></div><div class=\"line\">        Thread(target=self.build).start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    logging.basicConfig(format=<span class=\"string\">'%(asctime)s %(levelname)s: %(message)s'</span>,level=logging.INFO)</div><div class=\"line\"></div><div class=\"line\">    port = int(sys.argv[<span class=\"number\">1</span>]) <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">1111</span></div><div class=\"line\">    logging.info(<span class=\"string\">'starting the server at 127.0.0.1:%s'</span>,port)</div><div class=\"line\">    httpd = HTTPServer((<span class=\"string\">'127.0.0.1'</span>,port),HttpHandler)</div><div class=\"line\">    httpd.serve_forever()</div></pre></td></tr></table></figure></p>\n<p>将Python文件<code>hook.py</code>和对应的批处理文件<code>build.sh</code>都放置在hexo的目录下，启动Python监听：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup python3 hook.py &gt;&gt; /tmp/hook.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>\n<p>####批处理Shell<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"build at `date`\"</span></div><div class=\"line\">. ~/.nvm/nvm.sh</div><div class=\"line\">nvm use 0.10.35</div><div class=\"line\">git pull</div><div class=\"line\">hexo g -<span class=\"_\">-d</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"built successfully\"</span></div></pre></td></tr></table></figure></p>\n<p>当然，为了让Python能够正确执行脚本，还需要执行一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod +x build.sh</div></pre></td></tr></table></figure></p>\n<hr>\n<p>到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及<strong>github</strong>的日志，没有问题，都成功了。</p>\n<p>以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。</p>\n","excerpt":"<p>之前已经在本地搭建了hexo的环境，但是还是需要每次都要在本地生成一下然后再提交到<strong>github</strong>或者<strong>gitcafe</strong>上。固定在一台电脑上写作的问题还不是太大，如果需要在不同电脑甚至不同设备上写的话就没有办法了。</p>\n<p>之前刚好看到<strong>Bandwagon Host</strong>的特价VPS，原来都是用着别人分享的shadowsocks，以防万一，还是自己搞一个比较安全靠谱，顺便也一起搭了一个VPN，方便移动设备使用。</p>\n<p>下面该VPS的详细配置，年付<code>$9.99</code>，相当便宜了。<br><a href=\"https://bandwagonhost.com/aff.php?aff=1604&amp;pid=22\">直达链接（我的小尾巴~）</a></p>\n<blockquote>\n<p><strong>Basic VPS - Unmanaged - 5G PROMO V2</strong><br>Unmanaged service HDD: 5 GB SSD RAM: 512 MB CPU: 1x Intel Xeon BW: 500 GB/mo Link speed: 1 Gigabit VPS technology: OpenVZ/KiwiVM Linux OS: 32-bit and 64-bit Centos, Debian, Ubuntu, Fedora Instant OS reload 1 Dedicated IPv4 address Full root access PPP and VPN support (tun/tap) Instant RDNS update from control panel No contract, anytime cancellation Strictly unmanaged, no support 99% uptime guarantee 30-day money back guarantee</p>\n</blockquote>\n<p>既然有了VPS，那我就可以把hexo的生成和发布都扔到上面去，只要我有新的markdown文件，自动通知VPS让其执行对应的同步、生成和发布即可。<br><img src=\"http://pubshare.qiniudn.com/sumw3hexo%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83.png\" alt=\"脑图\"></p>","more":"<p>###GIT@OSC通知VPS更新<br>前面两步都没什么问题，主要是第三步，怎么让VPS知道我们已经更新的markdown文件并执行后续操作。</p>\n<p>对比几个国内的代码托管网站，最终我选择了<em>开源中国</em>的GIT（<strong>GIT@OSC</strong>），这也是我平常用得最多的代码托管网站。<strong>GIT@OSC</strong>提供了了一个非常好用的功能：<em>PUSH钩子</em>。<br><img src=\"http://pubshare.qiniudn.com/sumw3%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202014-12-31%20%E4%B8%8B%E5%8D%882.04.21.png\" alt=\"PUSH钩子\"><br>只要在钩子地址中填入对应的服务器地址，每次<strong>GIT@OSC</strong>收到新的<strong>PUSH</strong>的时候都会自动发一个<strong>POST</strong>请求至该地址，内容为该次<strong>PUSH</strong>的具体信息及<strong>PUSH钩子</strong>中设置的密码。</p>\n<p>因此，我们只需要在VPS上搭建一个简答的web服务器用来响应对应的请求获取通知即可。</p>\n<p>###VPS获取通知执行批处理</p>\n<p>####获取通知</p>\n<h5 id=\"1-nginx配置\"><a href=\"#1-nginx配置\" class=\"headerlink\" title=\"1. nginx配置\"></a>1. nginx配置</h5><p>获取通知主要通过nginx搭建反向代理服务器，把请求转发给Python后，通过Python执行请求的响应和后续的批处理。</p>\n<p>由于我VPS选用的是<code>Ubuntu</code>，所以安装nginx也非常简单，直接执行一下命令。<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo apt-get install nginx</div></pre></td></tr></table></figure></p>\n<p>修改<code>/etc/nginx/sites-available/default</code>文件，增加路由让其转发对应地址的请求至Python程序。<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">location /update &#123;</div><div class=\"line\">        proxy_pass http://127.0.0.1:1111;</div><div class=\"line\">    &#125;</div></pre></td></tr></table></figure></p>\n<p>重启nginx：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo /etc/init.d/nginx restart</div></pre></td></tr></table></figure></p>\n<h5 id=\"2-Python配置\"><a href=\"#2-Python配置\" class=\"headerlink\" title=\"2. Python配置\"></a>2. Python配置</h5><p>代码如下：<br><figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">#!/usr/bin/env python3</span></div><div class=\"line\"><span class=\"comment\">#-*- coding:utf-8 -*-</span></div><div class=\"line\"><span class=\"comment\"># start a python service and watch the nginx request dog</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">from</span> http.server <span class=\"keyword\">import</span> HTTPServer,CGIHTTPRequestHandler</div><div class=\"line\"><span class=\"keyword\">from</span> threading <span class=\"keyword\">import</span> Thread,RLock</div><div class=\"line\"><span class=\"keyword\">import</span> subprocess</div><div class=\"line\"><span class=\"keyword\">import</span> logging</div><div class=\"line\"><span class=\"keyword\">import</span> sys</div><div class=\"line\"><span class=\"keyword\">import</span> os.path</div><div class=\"line\"></div><div class=\"line\"></div><div class=\"line\">_PWD=os.path.abspath(os.path.dirname(__file__))</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">execute_cmd</span><span class=\"params\">(args,cwd=None,timeout=<span class=\"number\">30</span>)</span>:</span></div><div class=\"line\">    <span class=\"keyword\">if</span> isinstance(args,str): args = [args]</div><div class=\"line\">    <span class=\"keyword\">try</span>:</div><div class=\"line\">        <span class=\"keyword\">with</span> subprocess.Popen(args,stdout=subprocess.PIPE,cwd=cwd) <span class=\"keyword\">as</span> proc:</div><div class=\"line\">            <span class=\"keyword\">try</span>:</div><div class=\"line\">                output,unused_err = proc.communicate(timeout=timeout)</div><div class=\"line\">            <span class=\"keyword\">except</span>:</div><div class=\"line\">                proc.kill()</div><div class=\"line\">                <span class=\"keyword\">raise</span></div><div class=\"line\">            retcode = proc.poll()</div><div class=\"line\">            <span class=\"keyword\">if</span> retcode:</div><div class=\"line\">                <span class=\"keyword\">raise</span> subprocess.CalledProcessError(retcode, proc.args, output=output)</div><div class=\"line\">            <span class=\"keyword\">return</span> output.decode(<span class=\"string\">'utf-8'</span>,<span class=\"string\">'ignore'</span>) <span class=\"keyword\">if</span> output <span class=\"keyword\">else</span> <span class=\"string\">''</span></div><div class=\"line\">    <span class=\"keyword\">except</span> Exception <span class=\"keyword\">as</span> ex:</div><div class=\"line\">        logging.error(<span class=\"string\">'EXECUTE_CMD_ERROR: %s'</span>,<span class=\"string\">' '</span>.join(str(x) <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> args))</div><div class=\"line\">        <span class=\"keyword\">raise</span> ex</div><div class=\"line\"></div><div class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HttpHandler</span><span class=\"params\">(CGIHTTPRequestHandler)</span>:</span></div><div class=\"line\">    _lock = RLock()</div><div class=\"line\">    _counter = <span class=\"number\">0</span></div><div class=\"line\">    _building = <span class=\"keyword\">False</span></div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        <span class=\"keyword\">with</span> HttpHandler._lock:</div><div class=\"line\">            <span class=\"keyword\">if</span> HttpHandler._counter == <span class=\"number\">0</span> <span class=\"keyword\">or</span> HttpHandler._building:</div><div class=\"line\">                <span class=\"keyword\">return</span></div><div class=\"line\">        HttpHandler._counter = <span class=\"number\">0</span></div><div class=\"line\">        HttpHandler._building = <span class=\"keyword\">True</span></div><div class=\"line\">        logging.info(<span class=\"string\">\"BUILDING NOW...\"</span>)</div><div class=\"line\">        <span class=\"keyword\">try</span>:</div><div class=\"line\">            resp = execute_cmd(os.path.join(_PWD,<span class=\"string\">'build.sh'</span>),cwd=_PWD,timeout=<span class=\"number\">600</span>)</div><div class=\"line\">            logging.info(resp)</div><div class=\"line\">        <span class=\"keyword\">finally</span>:</div><div class=\"line\">            HttpHandler._building = <span class=\"keyword\">False</span></div><div class=\"line\">            self.build()</div><div class=\"line\"></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_GET</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.do_POST()</div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">do_POST</span><span class=\"params\">(self)</span>:</span></div><div class=\"line\">        self.send_response(<span class=\"number\">200</span>,<span class=\"string\">'OK'</span>)</div><div class=\"line\">        self.end_headers()</div><div class=\"line\">        self.wfile.write(<span class=\"string\">b'OK'</span>)</div><div class=\"line\">        self.wfile.flush()</div><div class=\"line\">        <span class=\"keyword\">with</span> HttpHandler._lock:</div><div class=\"line\">            HttpHandler._counter += <span class=\"number\">1</span></div><div class=\"line\">        Thread(target=self.build).start()</div><div class=\"line\"></div><div class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">'__main__'</span>:</div><div class=\"line\">    logging.basicConfig(format=<span class=\"string\">'%(asctime)s %(levelname)s: %(message)s'</span>,level=logging.INFO)</div><div class=\"line\"></div><div class=\"line\">    port = int(sys.argv[<span class=\"number\">1</span>]) <span class=\"keyword\">if</span> len(sys.argv) &gt; <span class=\"number\">1</span> <span class=\"keyword\">else</span> <span class=\"number\">1111</span></div><div class=\"line\">    logging.info(<span class=\"string\">'starting the server at 127.0.0.1:%s'</span>,port)</div><div class=\"line\">    httpd = HTTPServer((<span class=\"string\">'127.0.0.1'</span>,port),HttpHandler)</div><div class=\"line\">    httpd.serve_forever()</div></pre></td></tr></table></figure></p>\n<p>将Python文件<code>hook.py</code>和对应的批处理文件<code>build.sh</code>都放置在hexo的目录下，启动Python监听：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ nohup python3 hook.py &gt;&gt; /tmp/hook.log 2&gt;&amp;1 &amp;</div></pre></td></tr></table></figure></p>\n<p>####批处理Shell<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">#!/bin/bash</div><div class=\"line\"></span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"build at `date`\"</span></div><div class=\"line\">. ~/.nvm/nvm.sh</div><div class=\"line\">nvm use 0.10.35</div><div class=\"line\">git pull</div><div class=\"line\">hexo g -<span class=\"_\">-d</span></div><div class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"built successfully\"</span></div></pre></td></tr></table></figure></p>\n<p>当然，为了让Python能够正确执行脚本，还需要执行一下命令：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ sudo chmod +x build.sh</div></pre></td></tr></table></figure></p>\n<hr>\n<p>到此为止基本上都已经配置完毕，提交一个测试文件试一下，查看一下各自日志以及<strong>github</strong>的日志，没有问题，都成功了。</p>\n<p>以后终于可以直接提交markdown，而不用再去生成发布，哪怕是新电脑，没有环境问题，只要有浏览器有网络，一切都那么地简单。</p>"}],"PostAsset":[],"PostCategory":[{"post_id":"ciqt4vt9t0000qglsjlyuf5c7","category_id":"ciqt4vta50004qglsz4alt4w7","_id":"ciqt4vta80009qglsfd1e2bru"},{"post_id":"ciqt4vt9y0002qgls4j5br5v9","category_id":"ciqt4vta80008qgls1sggmfz5","_id":"ciqt4vtaa000eqglsn5z97gyn"},{"post_id":"ciqt4vta60005qglsf3d6b4ex","category_id":"ciqt4vta80008qgls1sggmfz5","_id":"ciqt4vtab000hqglsncu0ol19"},{"post_id":"ciqt4vta60006qglsnvtbuoc4","category_id":"ciqt4vta80008qgls1sggmfz5","_id":"ciqt4vtab000jqglstnivbe6b"}],"PostTag":[{"post_id":"ciqt4vt9t0000qglsjlyuf5c7","tag_id":"ciqt4vta10003qglsyvruch5t","_id":"ciqt4vtaa000cqglsba63qkly"},{"post_id":"ciqt4vt9t0000qglsjlyuf5c7","tag_id":"ciqt4vta70007qglsrb3y2ojd","_id":"ciqt4vtaa000dqgls9r2d27z7"},{"post_id":"ciqt4vt9y0002qgls4j5br5v9","tag_id":"ciqt4vta8000aqglsib76qeib","_id":"ciqt4vtac000mqgls2o693yhf"},{"post_id":"ciqt4vt9y0002qgls4j5br5v9","tag_id":"ciqt4vtaa000gqglstfvf3jp5","_id":"ciqt4vtac000nqgls8bbs6ofn"},{"post_id":"ciqt4vt9y0002qgls4j5br5v9","tag_id":"ciqt4vtab000iqglspv530u1b","_id":"ciqt4vtac000pqglsdpsqnxja"},{"post_id":"ciqt4vt9y0002qgls4j5br5v9","tag_id":"ciqt4vtab000kqglsenbl1yeq","_id":"ciqt4vtac000qqglst1wmshgk"},{"post_id":"ciqt4vta60005qglsf3d6b4ex","tag_id":"ciqt4vtac000lqglsiw4fsx1d","_id":"ciqt4vtaf000uqglslin3sp20"},{"post_id":"ciqt4vta60005qglsf3d6b4ex","tag_id":"ciqt4vtac000oqglsx8t12hvi","_id":"ciqt4vtaf000vqglsy3vf63wh"},{"post_id":"ciqt4vta60005qglsf3d6b4ex","tag_id":"ciqt4vtab000kqglsenbl1yeq","_id":"ciqt4vtag000xqgls2bege759"},{"post_id":"ciqt4vta60005qglsf3d6b4ex","tag_id":"ciqt4vtab000iqglspv530u1b","_id":"ciqt4vtag000yqglsxudk045p"},{"post_id":"ciqt4vta60006qglsnvtbuoc4","tag_id":"ciqt4vtaf000tqgls7aheu1hb","_id":"ciqt4vtah0010qglsy8upi060"},{"post_id":"ciqt4vta60006qglsnvtbuoc4","tag_id":"ciqt4vtac000lqglsiw4fsx1d","_id":"ciqt4vtah0011qglsgnksdmnn"},{"post_id":"ciqt4vta60006qglsnvtbuoc4","tag_id":"ciqt4vtag000zqgls16rrsuvv","_id":"ciqt4vtah0012qgls12a2gbt2"}],"Tag":[{"name":"sql server 2005","_id":"ciqt4vta10003qglsyvruch5t"},{"name":"备份还原","_id":"ciqt4vta70007qglsrb3y2ojd"},{"name":"raneto","_id":"ciqt4vta8000aqglsib76qeib"},{"name":"wiki","_id":"ciqt4vtaa000gqglstfvf3jp5"},{"name":"markdown","_id":"ciqt4vtab000iqglspv530u1b"},{"name":"nodejs","_id":"ciqt4vtab000kqglsenbl1yeq"},{"name":"hexo","_id":"ciqt4vtac000lqglsiw4fsx1d"},{"name":"github","_id":"ciqt4vtac000oqglsx8t12hvi"},{"name":"vps","_id":"ciqt4vtaf000tqgls7aheu1hb"},{"name":"git","_id":"ciqt4vtag000zqgls16rrsuvv"}]}}